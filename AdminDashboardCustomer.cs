using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Windows.Forms;

namespace ProjectEDP
{
    public partial class AdminDashboardCustomer : Form
    {
        // Connection string to your SQL Server LocalDB database.
        // NOTE: Ensure the path to your .mdf file is correct on the deployment machine.
        private string connectionString = @"Data Source=(LocalDB)\MSSQLLocalDB;AttachDbFilename=C:\Users\User\source\repos\ProjectEDP_CarRental\PrimeWheel.mdf;Integrated Security=True";
        private string selectedCustId = string.Empty; // Stores the ID of the currently selected customer.
        private bool isDeleteProcessing = false; // Guard flag to prevent multiple deletion attempts.

        public AdminDashboardCustomer()
        {
            InitializeComponent(); // Initializes components generated by the designer.
            this.Load += AdminDashboardCustomer_Load; // Attaches the Load event handler.
            this.customerDataGridView.CellClick += customerDataGridView_CellClick; // Attaches the CellClick event handler for the DataGridView.
            // The DeleteB.Click event is typically handled by the designer, no need to add it here.
        }

        /// <summary>
        /// Handles the click event for the save item on the customer binding navigator.
        /// Saves changes from the dataset back to the database.
        /// </summary>
        private void customerBindingNavigatorSaveItem_Click(object sender, EventArgs e)
        {
            try
            {
                this.Validate(); // Validates input controls bound to data.
                this.customerBindingSource.EndEdit(); // Ends the current edit operation on the binding source.
                this.tableAdapterManager.UpdateAll(this.primeWheelDataSet); // Updates all tables in the dataset.
                MessageBox.Show("Changes saved successfully!", "Save", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error saving changes: " + ex.Message, "Save Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        /// <summary>
        /// Handles the form's Load event.
        /// Loads customer data into the DataGridView and initializes UI elements.
        /// </summary>
        private void AdminDashboardCustomer_Load(object sender, EventArgs e)
        {
            LoadCustomersIntoDataGridView(); // Populates the DataGridView with customer data.
            DeleteB.Enabled = false; // Disables the delete button initially.
            custidL.Text = string.Empty; // Clears the customer ID label.
        }

        /// <summary>
        /// Loads or refreshes customer data from the database into the DataGridView.
        /// </summary>
        private void LoadCustomersIntoDataGridView()
        {
            try
            {
                // Clear existing data to ensure a fresh load.
                this.primeWheelDataSet.Customer.Clear();
                // Fill the Customer DataTable with data from the database using the TableAdapter.
                this.customerTableAdapter.Fill(this.primeWheelDataSet.Customer);
                // Reset bindings to reflect new data in the DataGridView.
                this.customerBindingSource.ResetBindings(false);
                // Refresh the DataGridView to ensure it displays the latest data.
                this.customerDataGridView.Refresh();
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error loading customer data: " + ex.Message, "Database Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        /// <summary>
        /// Handles the CellClick event of the customerDataGridView.
        /// Retrieves the selected customer's ID and enables the delete button.
        /// </summary>
        private void customerDataGridView_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            // Ensure a valid row is clicked (not header or empty row).
            if (e.RowIndex >= 0 && e.RowIndex < customerDataGridView.Rows.Count)
            {
                DataGridViewRow row = customerDataGridView.Rows[e.RowIndex];
                DataGridViewCell custIdCell = null;

                // Attempt to find the "Cust_id" column by its name, data property name, or header text.
                if (customerDataGridView.Columns.Contains("Cust_id"))
                    custIdCell = row.Cells["Cust_id"];
                else
                {
                    foreach (DataGridViewColumn col in customerDataGridView.Columns)
                    {
                        if (col.DataPropertyName == "Cust_id" || col.HeaderText == "Cust_id" || col.Name == "Cust_id")
                        {
                            custIdCell = row.Cells[col.Index];
                            break;
                        }
                    }
                }

                // If the customer ID cell is found and has a value, update the UI.
                if (custIdCell != null && custIdCell.Value != null)
                {
                    selectedCustId = custIdCell.Value.ToString();
                    custidL.Text = selectedCustId;
                    DeleteB.Enabled = true; // Enable delete button as a customer is selected.
                }
                else
                {
                    // If Cust_id could not be retrieved, reset and disable delete.
                    selectedCustId = string.Empty;
                    custidL.Text = string.Empty;
                    DeleteB.Enabled = false;
                    MessageBox.Show("Could not retrieve Customer ID from selected row.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
            else
            {
                // If an invalid row is clicked, clear selection and disable delete.
                selectedCustId = string.Empty;
                custidL.Text = string.Empty;
                DeleteB.Enabled = false;
            }

            // Clear DataGridView selection if no customer is selected.
            if (string.IsNullOrEmpty(selectedCustId))
                customerDataGridView.ClearSelection();
        }

        /// <summary>
        /// Handles the Click event of the DeleteB (Delete Button).
        /// Deletes the selected customer and associated bookings, and updates car statuses.
        /// </summary>
        private void DeleteB_Click(object sender, EventArgs e)
        {
            // Prevent re-entry if a deletion is already in progress.
            if (isDeleteProcessing) return;
            isDeleteProcessing = true; // Set guard flag.

            try
            {
                string idToDelete = selectedCustId;
                DeleteB.Enabled = false; // Temporarily disable button to prevent double-clicks.

                // Validate if a customer is selected for deletion.
                if (string.IsNullOrEmpty(idToDelete))
                {
                    MessageBox.Show("No customer selected for deletion. Please select a row.", "Validation Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return; // Exit if no customer is selected.
                }

                // Confirm deletion with the user.
                DialogResult confirmResult = MessageBox.Show(
                    $"Are you sure you want to delete customer with ID: {idToDelete}?\n\nThis will also delete all their bookings and make associated cars available.",
                    "Confirm Delete Customer", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);

                if (confirmResult == DialogResult.Yes)
                {
                    SqlTransaction transaction = null; // Declare transaction object.
                    using (SqlConnection conn = new SqlConnection(connectionString))
                    {
                        conn.Open(); // Open database connection.
                        transaction = conn.BeginTransaction(); // Start a new transaction.

                        try
                        {
                            // 1. Get Car_ids associated with bookings of the customer BEFORE deleting bookings.
                            string getBookedCarIdsQuery = "SELECT DISTINCT Car_id FROM Booking WHERE Cust_id = @custId";
                            SqlCommand getBookedCarIdsCmd = new SqlCommand(getBookedCarIdsQuery, conn, transaction);
                            getBookedCarIdsCmd.Parameters.AddWithValue("@custId", idToDelete);

                            List<string> carIdsToUpdate = new List<string>();
                            using (SqlDataReader reader = getBookedCarIdsCmd.ExecuteReader())
                            {
                                while (reader.Read())
                                    carIdsToUpdate.Add(reader["Car_id"].ToString());
                            }
                            // reader.Close(); // Removed: The 'using' statement automatically disposes and closes the reader.

                            // 2. Delete all bookings associated with the customer.
                            // This is CRUCIAL to resolve the foreign key conflict.
                            string deleteBookingsQuery = "DELETE FROM Booking WHERE Cust_id = @custId";
                            SqlCommand deleteBookingsCmd = new SqlCommand(deleteBookingsQuery, conn, transaction);
                            deleteBookingsCmd.Parameters.AddWithValue("@custId", idToDelete);
                            deleteBookingsCmd.ExecuteNonQuery();

                            // 3. Update the status of affected cars to available (Status = 1).
                            if (carIdsToUpdate.Any())
                            {
                                // Using a parameterized query for IN clause is safer and prevents SQL Injection.
                                string updateCarStatusQuery = "UPDATE Car SET Status = 1 WHERE Car_id IN ({0})";
                                // Build a comma-separated list of parameters for the IN clause.
                                string[] paramNames = carIdsToUpdate.Select((_, i) => $"@carId{i}").ToArray();
                                updateCarStatusQuery = string.Format(updateCarStatusQuery, string.Join(",", paramNames));

                                SqlCommand updateCarStatusCmd = new SqlCommand(updateCarStatusQuery, conn, transaction);
                                for (int i = 0; i < carIdsToUpdate.Count; i++)
                                {
                                    updateCarStatusCmd.Parameters.AddWithValue(paramNames[i], carIdsToUpdate[i]);
                                }
                                updateCarStatusCmd.ExecuteNonQuery();
                            }

                            // 4. Delete the customer record.
                            string deleteCustomerQuery = "DELETE FROM Customer WHERE Cust_id = @custId";
                            SqlCommand deleteCustomerCmd = new SqlCommand(deleteCustomerQuery, conn, transaction);
                            deleteCustomerCmd.Parameters.AddWithValue("@custId", idToDelete);
                            int rowsAffected = deleteCustomerCmd.ExecuteNonQuery();

                            if (rowsAffected > 0)
                            {
                                transaction.Commit(); // Commit the transaction if all operations succeed.
                                MessageBox.Show($"Customer with ID {idToDelete} and all associated bookings deleted successfully. Car statuses updated.", "Delete Successful", MessageBoxButtons.OK, MessageBoxIcon.Information);

                                // Update the DataGridView by removing the deleted row from the dataset.
                                DataRow[] rowsToDelete = this.primeWheelDataSet.Customer.Select($"Cust_id = '{idToDelete}'");
                                if (rowsToDelete.Length > 0)
                                    rowsToDelete[0].Delete();

                                this.customerBindingSource.ResetBindings(false); // Refresh bindings.
                                this.customerDataGridView.Refresh(); // Refresh DataGridView display.

                                // Clear selection and reset UI elements.
                                customerDataGridView.ClearSelection();
                                selectedCustId = string.Empty;
                                custidL.Text = string.Empty;
                                DeleteB.Enabled = false;
                            }
                            else
                            {
                                transaction.Rollback(); // Rollback if no customer was found/deleted.
                                MessageBox.Show($"Customer with ID {idToDelete} not found or could not be deleted.", "Delete Failed", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                                DeleteB.Enabled = true; // Re-enable button on failure.
                            }
                        }
                        catch (Exception ex)
                        {
                            // If any error occurs within the transaction, roll it back.
                            transaction?.Rollback();
                            MessageBox.Show("Error during deletion transaction: " + ex.Message, "Transaction Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            DeleteB.Enabled = true; // Re-enable button on error.
                        }
                    }
                }
                else
                {
                    // If user cancels deletion, re-enable button.
                    DeleteB.Enabled = true;
                }
            }
            catch (Exception ex)
            {
                // Catch any errors outside the transaction block.
                MessageBox.Show("An unexpected error occurred: " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                DeleteB.Enabled = true; // Re-enable button on error.
            }
            finally
            {
                isDeleteProcessing = false; // Reset guard flag.
            }
        }

        // Unused event handlers, kept as per original code.
        private void customerDataGridView_CellContentClick(object sender, DataGridViewCellEventArgs e) { }
        private void custidL_Click(object sender, EventArgs e) { }

        /// <summary>
        /// Navigates back to the Admin Dashboard.
        /// </summary>
        private void toBookingB_Click(object sender, EventArgs e)
        {
            AdminDashboard dashboard = new AdminDashboard();
            dashboard.Show(); // Show the Admin Dashboard form.
            this.Hide(); // Hide the current form.
        }
    }
}